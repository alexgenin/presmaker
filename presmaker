#!/bin/bash
# 
# Alexandre GÃ©nin, 2018. MIT License.
# 
TMPDIR="/tmp/tmpfiles_$RANDOM"
mkdir ${TMPDIR}
mkdir "${TMPDIR}/svg"

# We need to trap interruptions to clean up things before quitting
trap interrupt INT

function interrupt() { 
  echo "Got Ctrl+C ! Cleaning up and quitting..."
  cleanup
  exit 1
}

function cleanup() {
  # Clean up directories
  echo "Cleaning up..."
  rm -r "$RESDIR" "$TMPDIR"
  mv "$RESDIRTMP" "$RESDIR"
}


# Test if the info.pmk file exists
if [[ -n "$1" ]]; then
  source "$1"
else
  echo "No info file provided. Trying ./info.pmk." 
  
  if [[ -e "./info.pmk" ]]; then 
    source "./info.pmk"
  else 
    "./info.pmk not found, creating default directory structure."
  fi

  if [[ ! -e "./info.pmk" ]]; then
    cp "/usr/share/presmaker/info_default.pmk" "./info.pmk"
    source "./info.pmk"
    echo "Creating resource dir $RESDIR"
    mkdir "$RESDIR"
    echo "Creating slides dir $FILESDIR"
    mkdir "$FILESDIR"
    echo "Creating default slide"
    cp "/usr/share/presmaker/blank_slide.svg" "./$FILESDIR/00_00_first_slide.svg"
    echo ""
    echo "Setup done, now edit ./$FILESDIR/00_00_first_slide.svg to start working"
    echo "on your slides."
    echo ""
    echo "Create a new slide by adding files in the directory ./$FILESDIR. For"
    echo "example, the files in ./$FILESDIR could look like this: "
    echo "  00_00_first_slide.svg"
    echo "  00_02_some_background.svg"
    echo "  00_04_intro.svg"
    echo "  01_00_results.svg"
    echo "  01_02_more_results.svg"
    echo "  02_99_conclusions.svg"
    echo ""
    echo "Running presmaker again will produce a pdf file with 6 slides, "
    echo "respecting the bash sorting order of svg files."
    echo "" 
    echo "You can put images and other files in ./$RESDIR and link them in " 
    echo "inkscape svgs. Raster images will ba automatically resized."
    echo "" 
    echo "Some tags can be replaced in the text fields of svg files. See the file"
    echo "info.pmk for more information."
    echo "" 
    echo "Re-run presmaker to create slides"
    
    exit 0
  fi
fi
RESDIRTMP="${RESDIR}_bak"

# Look for slides in given dir
FILES="$(ls $FILESDIR | egrep '.svg$')"
if [[ $( find ${FILESDIR} -type f | wc -l ) == 0 ]]; then
  echo "No slides found in ${FILESDIR}"
  exit
fi

# Resize images in resources dir 
cp -r "$RESDIR" "$RESDIRTMP"

echo 'Resizing images:'
for i in $(find ${RESDIR} -type f); do
  iext="${i##*.}"
  if [[ $(echo $iext | egrep -Ei 'png|jpg|tif|bmp') ]]; then
    iwidth=$(exiftool -S -ImageWidth ${i} |cut -f2 -d' ')
    iheight=$(exiftool -S -ImageHeight ${i} |cut -f2 -d' ')
    if [[ $iwidth -gt $RASTERMAXRES || $iheight -gt $RASTERMAXRES ]]; then
      echo "  $(basename $i)"
      convert ${i} -resize $RASTERMAXRES "${i}_tmp"
      mv "${i}_tmp" ${i}
    fi
  fi
done

# Process slides
NSLIDES=$(echo "$FILES" | wc -w)
CURSLIDE=1
echo 'Processing slides:'
for i in ${FILES[*]}; do
  echo "  $FILESDIR/$i"
  CURFILE="$FILESDIR""/""$i"
  CURTMP="$TMPDIR/svg/$i"
  TMPOUT="$TMPDIR""/""$(basename $i .svg)"".pdf"
  
  cp "$CURFILE" "$CURTMP"
  
  # Process default tags
  sed -i "s/##DATE##/$presdate/" "$CURTMP" # Date
  sed -i "s/##AUTHOR##/$author/" "$CURTMP" # Author
  sed -i "s/##TP##/"$NSLIDES"/" "$CURTMP"  # Total number of slides
  sed -i "s/##CP##/$CURSLIDE/" "$CURTMP"   # Current slide number
  
  # Process custom tags 
  for tag in $(seq 0 $(( ${#CUSTOMTAGS[@]} - 1 ))); do 
    curtag=${CUSTOMTAGS[$tag]}
    curval=${CUSTOMVALS[$tag]}
    sed -i "s/$curtag/$curval/g" "$CURTMP"
  done
  
  CURSLIDE=$(( $CURSLIDE + 1 )) # Move on to next slide
  
  # Render slide
  inkscape -C -A "$TMPOUT" "$CURTMP";
done

echo "Merging slides"
pdftk $TMPDIR/*.pdf cat output ${OUTFILE}

# Clean up
rm -r "$RESDIR" 
mv "$RESDIRTMP" "$RESDIR"

echo "Created ${OUTFILE}"

exit 0
